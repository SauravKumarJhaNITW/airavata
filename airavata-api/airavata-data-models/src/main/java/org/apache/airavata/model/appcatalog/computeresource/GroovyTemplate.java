/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.computeresource;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class GroovyTemplate implements org.apache.thrift.TBase<GroovyTemplate, GroovyTemplate._Fields>, java.io.Serializable, Cloneable, Comparable<GroovyTemplate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroovyTemplate");

  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("templateName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("templateBody", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField READ_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("readOnly", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField RESOURCE_JOB_MANAGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceJobManagerType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GroovyTemplateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GroovyTemplateTupleSchemeFactory();

  private java.lang.String templateId; // required
  private java.lang.String templateName; // required
  private java.lang.String templateBody; // required
  private boolean readOnly; // required
  private ResourceJobManagerType resourceJobManagerType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEMPLATE_ID((short)1, "templateId"),
    TEMPLATE_NAME((short)2, "templateName"),
    TEMPLATE_BODY((short)3, "templateBody"),
    READ_ONLY((short)4, "readOnly"),
    /**
     * 
     * @see ResourceJobManagerType
     */
    RESOURCE_JOB_MANAGER_TYPE((short)5, "resourceJobManagerType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 2: // TEMPLATE_NAME
          return TEMPLATE_NAME;
        case 3: // TEMPLATE_BODY
          return TEMPLATE_BODY;
        case 4: // READ_ONLY
          return READ_ONLY;
        case 5: // RESOURCE_JOB_MANAGER_TYPE
          return RESOURCE_JOB_MANAGER_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READONLY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("templateName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_BODY, new org.apache.thrift.meta_data.FieldMetaData("templateBody", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_ONLY, new org.apache.thrift.meta_data.FieldMetaData("readOnly", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_JOB_MANAGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceJobManagerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceJobManagerType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroovyTemplate.class, metaDataMap);
  }

  public GroovyTemplate() {
    this.templateId = "DO_NOT_SET_AT_CLIENTS";

  }

  public GroovyTemplate(
    java.lang.String templateId,
    java.lang.String templateName,
    java.lang.String templateBody,
    boolean readOnly,
    ResourceJobManagerType resourceJobManagerType)
  {
    this();
    this.templateId = templateId;
    this.templateName = templateName;
    this.templateBody = templateBody;
    this.readOnly = readOnly;
    setReadOnlyIsSet(true);
    this.resourceJobManagerType = resourceJobManagerType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroovyTemplate(GroovyTemplate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTemplateId()) {
      this.templateId = other.templateId;
    }
    if (other.isSetTemplateName()) {
      this.templateName = other.templateName;
    }
    if (other.isSetTemplateBody()) {
      this.templateBody = other.templateBody;
    }
    this.readOnly = other.readOnly;
    if (other.isSetResourceJobManagerType()) {
      this.resourceJobManagerType = other.resourceJobManagerType;
    }
  }

  public GroovyTemplate deepCopy() {
    return new GroovyTemplate(this);
  }

  @Override
  public void clear() {
    this.templateId = "DO_NOT_SET_AT_CLIENTS";

    this.templateName = null;
    this.templateBody = null;
    setReadOnlyIsSet(false);
    this.readOnly = false;
    this.resourceJobManagerType = null;
  }

  public java.lang.String getTemplateId() {
    return this.templateId;
  }

  public void setTemplateId(java.lang.String templateId) {
    this.templateId = templateId;
  }

  public void unsetTemplateId() {
    this.templateId = null;
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return this.templateId != null;
  }

  public void setTemplateIdIsSet(boolean value) {
    if (!value) {
      this.templateId = null;
    }
  }

  public java.lang.String getTemplateName() {
    return this.templateName;
  }

  public void setTemplateName(java.lang.String templateName) {
    this.templateName = templateName;
  }

  public void unsetTemplateName() {
    this.templateName = null;
  }

  /** Returns true if field templateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateName() {
    return this.templateName != null;
  }

  public void setTemplateNameIsSet(boolean value) {
    if (!value) {
      this.templateName = null;
    }
  }

  public java.lang.String getTemplateBody() {
    return this.templateBody;
  }

  public void setTemplateBody(java.lang.String templateBody) {
    this.templateBody = templateBody;
  }

  public void unsetTemplateBody() {
    this.templateBody = null;
  }

  /** Returns true if field templateBody is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateBody() {
    return this.templateBody != null;
  }

  public void setTemplateBodyIsSet(boolean value) {
    if (!value) {
      this.templateBody = null;
    }
  }

  public boolean isReadOnly() {
    return this.readOnly;
  }

  public void setReadOnly(boolean readOnly) {
    this.readOnly = readOnly;
    setReadOnlyIsSet(true);
  }

  public void unsetReadOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READONLY_ISSET_ID);
  }

  /** Returns true if field readOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetReadOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READONLY_ISSET_ID);
  }

  public void setReadOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READONLY_ISSET_ID, value);
  }

  /**
   * 
   * @see ResourceJobManagerType
   */
  public ResourceJobManagerType getResourceJobManagerType() {
    return this.resourceJobManagerType;
  }

  /**
   * 
   * @see ResourceJobManagerType
   */
  public void setResourceJobManagerType(ResourceJobManagerType resourceJobManagerType) {
    this.resourceJobManagerType = resourceJobManagerType;
  }

  public void unsetResourceJobManagerType() {
    this.resourceJobManagerType = null;
  }

  /** Returns true if field resourceJobManagerType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceJobManagerType() {
    return this.resourceJobManagerType != null;
  }

  public void setResourceJobManagerTypeIsSet(boolean value) {
    if (!value) {
      this.resourceJobManagerType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((java.lang.String)value);
      }
      break;

    case TEMPLATE_NAME:
      if (value == null) {
        unsetTemplateName();
      } else {
        setTemplateName((java.lang.String)value);
      }
      break;

    case TEMPLATE_BODY:
      if (value == null) {
        unsetTemplateBody();
      } else {
        setTemplateBody((java.lang.String)value);
      }
      break;

    case READ_ONLY:
      if (value == null) {
        unsetReadOnly();
      } else {
        setReadOnly((java.lang.Boolean)value);
      }
      break;

    case RESOURCE_JOB_MANAGER_TYPE:
      if (value == null) {
        unsetResourceJobManagerType();
      } else {
        setResourceJobManagerType((ResourceJobManagerType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_ID:
      return getTemplateId();

    case TEMPLATE_NAME:
      return getTemplateName();

    case TEMPLATE_BODY:
      return getTemplateBody();

    case READ_ONLY:
      return isReadOnly();

    case RESOURCE_JOB_MANAGER_TYPE:
      return getResourceJobManagerType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_ID:
      return isSetTemplateId();
    case TEMPLATE_NAME:
      return isSetTemplateName();
    case TEMPLATE_BODY:
      return isSetTemplateBody();
    case READ_ONLY:
      return isSetReadOnly();
    case RESOURCE_JOB_MANAGER_TYPE:
      return isSetResourceJobManagerType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GroovyTemplate)
      return this.equals((GroovyTemplate)that);
    return false;
  }

  public boolean equals(GroovyTemplate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (!this.templateId.equals(that.templateId))
        return false;
    }

    boolean this_present_templateName = true && this.isSetTemplateName();
    boolean that_present_templateName = true && that.isSetTemplateName();
    if (this_present_templateName || that_present_templateName) {
      if (!(this_present_templateName && that_present_templateName))
        return false;
      if (!this.templateName.equals(that.templateName))
        return false;
    }

    boolean this_present_templateBody = true && this.isSetTemplateBody();
    boolean that_present_templateBody = true && that.isSetTemplateBody();
    if (this_present_templateBody || that_present_templateBody) {
      if (!(this_present_templateBody && that_present_templateBody))
        return false;
      if (!this.templateBody.equals(that.templateBody))
        return false;
    }

    boolean this_present_readOnly = true;
    boolean that_present_readOnly = true;
    if (this_present_readOnly || that_present_readOnly) {
      if (!(this_present_readOnly && that_present_readOnly))
        return false;
      if (this.readOnly != that.readOnly)
        return false;
    }

    boolean this_present_resourceJobManagerType = true && this.isSetResourceJobManagerType();
    boolean that_present_resourceJobManagerType = true && that.isSetResourceJobManagerType();
    if (this_present_resourceJobManagerType || that_present_resourceJobManagerType) {
      if (!(this_present_resourceJobManagerType && that_present_resourceJobManagerType))
        return false;
      if (!this.resourceJobManagerType.equals(that.resourceJobManagerType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTemplateId()) ? 131071 : 524287);
    if (isSetTemplateId())
      hashCode = hashCode * 8191 + templateId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemplateName()) ? 131071 : 524287);
    if (isSetTemplateName())
      hashCode = hashCode * 8191 + templateName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemplateBody()) ? 131071 : 524287);
    if (isSetTemplateBody())
      hashCode = hashCode * 8191 + templateBody.hashCode();

    hashCode = hashCode * 8191 + ((readOnly) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResourceJobManagerType()) ? 131071 : 524287);
    if (isSetResourceJobManagerType())
      hashCode = hashCode * 8191 + resourceJobManagerType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(GroovyTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemplateName()).compareTo(other.isSetTemplateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateName, other.templateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemplateBody()).compareTo(other.isSetTemplateBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateBody, other.templateBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadOnly()).compareTo(other.isSetReadOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readOnly, other.readOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceJobManagerType()).compareTo(other.isSetResourceJobManagerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceJobManagerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceJobManagerType, other.resourceJobManagerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GroovyTemplate(");
    boolean first = true;

    sb.append("templateId:");
    if (this.templateId == null) {
      sb.append("null");
    } else {
      sb.append(this.templateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateName:");
    if (this.templateName == null) {
      sb.append("null");
    } else {
      sb.append(this.templateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateBody:");
    if (this.templateBody == null) {
      sb.append("null");
    } else {
      sb.append(this.templateBody);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readOnly:");
    sb.append(this.readOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceJobManagerType:");
    if (this.resourceJobManagerType == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceJobManagerType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTemplateId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templateId' is unset! Struct:" + toString());
    }

    if (!isSetTemplateName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templateName' is unset! Struct:" + toString());
    }

    if (!isSetTemplateBody()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'templateBody' is unset! Struct:" + toString());
    }

    if (!isSetReadOnly()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'readOnly' is unset! Struct:" + toString());
    }

    if (!isSetResourceJobManagerType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceJobManagerType' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroovyTemplateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GroovyTemplateStandardScheme getScheme() {
      return new GroovyTemplateStandardScheme();
    }
  }

  private static class GroovyTemplateStandardScheme extends org.apache.thrift.scheme.StandardScheme<GroovyTemplate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroovyTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateId = iprot.readString();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateName = iprot.readString();
              struct.setTemplateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPLATE_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateBody = iprot.readString();
              struct.setTemplateBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // READ_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.readOnly = iprot.readBool();
              struct.setReadOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOURCE_JOB_MANAGER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resourceJobManagerType = org.apache.airavata.model.appcatalog.computeresource.ResourceJobManagerType.findByValue(iprot.readI32());
              struct.setResourceJobManagerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroovyTemplate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.templateId != null) {
        oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
        oprot.writeString(struct.templateId);
        oprot.writeFieldEnd();
      }
      if (struct.templateName != null) {
        oprot.writeFieldBegin(TEMPLATE_NAME_FIELD_DESC);
        oprot.writeString(struct.templateName);
        oprot.writeFieldEnd();
      }
      if (struct.templateBody != null) {
        oprot.writeFieldBegin(TEMPLATE_BODY_FIELD_DESC);
        oprot.writeString(struct.templateBody);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_ONLY_FIELD_DESC);
      oprot.writeBool(struct.readOnly);
      oprot.writeFieldEnd();
      if (struct.resourceJobManagerType != null) {
        oprot.writeFieldBegin(RESOURCE_JOB_MANAGER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.resourceJobManagerType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroovyTemplateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GroovyTemplateTupleScheme getScheme() {
      return new GroovyTemplateTupleScheme();
    }
  }

  private static class GroovyTemplateTupleScheme extends org.apache.thrift.scheme.TupleScheme<GroovyTemplate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroovyTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.templateId);
      oprot.writeString(struct.templateName);
      oprot.writeString(struct.templateBody);
      oprot.writeBool(struct.readOnly);
      oprot.writeI32(struct.resourceJobManagerType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroovyTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.templateId = iprot.readString();
      struct.setTemplateIdIsSet(true);
      struct.templateName = iprot.readString();
      struct.setTemplateNameIsSet(true);
      struct.templateBody = iprot.readString();
      struct.setTemplateBodyIsSet(true);
      struct.readOnly = iprot.readBool();
      struct.setReadOnlyIsSet(true);
      struct.resourceJobManagerType = org.apache.airavata.model.appcatalog.computeresource.ResourceJobManagerType.findByValue(iprot.readI32());
      struct.setResourceJobManagerTypeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

