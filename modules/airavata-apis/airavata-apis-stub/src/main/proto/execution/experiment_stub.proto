/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
// dozer-proto3 requires the package name to be specified with option java_package
option java_package="org.apache.airavata.api.execution.stubs";
package org.apache.airavata.api.execution.stubs;

message CommandLineInput {
  int32 position = 1;
  string prefix = 2;
  string value = 3;
}

message FileLocation {
  string storage_id = 1;
  string path = 2;
  string storage_credential_id = 3;
}

message FileInput {
  string friendly_name = 1;
  string destination_path = 2;
}

message EnvironmentInput {
  string key = 1;
  string value = 2;
}

message ApplicationInput {
  int32 index = 1;
  oneof input {
    CommandLineInput command_line_input = 2;
    FileInput file_input = 3;
    EnvironmentInput environment_input = 4;
  }
  bool required = 5;
}

message FileOutput {
  string friendly_name = 1;
  string destination_path = 2;
}

message StandardOut {
  string destination_path = 1;
}

message StandardError {
  string destination_path = 1;
}

message ApplicationOutput {
  int32 index = 1;
  oneof output {
      FileOutput file_output = 2;
      StandardOut std_out = 3;
      StandardError std_err = 4;
  }
  bool required = 5;
}

message Application {
  string application_id = 1;
  string name = 2;
  repeated ApplicationInput inputs = 3;
  repeated ApplicationOutput outputs = 4;
}

message SlurmRunner {
  int32 nodes = 1;
  int32 cpus = 2;
  int32 memory = 3;
  int64 wall_time = 4;
  repeated string pre_job_commands = 5;
  repeated string module_load_commands = 6;
  string executable = 7;
  repeated string post_job_commands = 8;
  string queue = 9;
  repeated string notification_emails = 10;
}

message DockerRunner {
  string image_name = 1;
  string image_tag = 2;
  string repository = 3;
  string docker_credential_id = 4;
  string run_command = 5;
}

message ApplicationRunInfo {
  Application application = 1;
  oneof runner {
    DockerRunner docker_runner = 2;
    SlurmRunner slurm_runner = 3;
  }
}

message SSHInterface {
  string interface_id = 1;
  string host_name = 2;
  int32 port = 3;
  string ssh_credential_id = 4;
}

message SCPInterface {
  string interface_id = 1;
  string host_name = 2;
  int32 port = 3;
  string ssh_credential_id = 4;
}

message ServerBackend {
  string host_name = 1;
  int32 port = 2;
  SSHInterface command_interface = 3;
  SCPInterface data_interface = 4;
  string working_directory = 5;
}

message EC2Backend {
  string flavor = 1;
  string region = 3;
  string aws_credential_id = 4;
}

message LocalBackend {
  string agent_id = 1;
  string agent_token_id = 2;
}

message RunConfiguration {
  oneof compute_backend {
    ServerBackend server = 1;
    EC2Backend ec2 = 2;
    LocalBackend local = 3;
  }
  ApplicationRunInfo app_run_info = 4;
  repeated DataMovementConfiguration data_movement_configs = 5;
}

message InDataMovement {
  int32 input_index = 1;
  FileLocation source_location = 2;
}

message OutDataMovement {
  int32 output_index = 1;
  FileLocation destination_location = 2;
}

message DataMovementConfiguration {
  repeated InDataMovement in_movements = 1;
  repeated OutDataMovement out_movements = 2;
}

message Experiment {
  string experiment_id = 1;
  string project_id = 2;
  string gateway_id = 3;
  string experiment_name = 6;
  int64 creation_time = 7;
  string description = 8;
  repeated RunConfiguration run_configs = 9;
}

message ExperimentSummaryModel {
  string experiment_id = 1;
  string project_id = 2;
  string gateway_id = 3;
  int64 creation_time = 4;
  string user_name = 5;
  string name = 6;
  string description = 7;
  string execution_id = 8;
  string resource_host_id = 9;
  string experiment_status = 10;
  int64 status_update_time = 12;
}

message ExperimentStatistics {
  int32 all_experiment_count = 1;
  int32 completed_experiment_count = 2;
  int32 cancelled_experiment_count = 3;
  int32 failed_experiment_count = 4;
  int32 created_experiment_count = 5;
  int32 running_experiment_count = 6;
  repeated ExperimentSummaryModel all_experiments = 7;
  repeated ExperimentSummaryModel completed_experiments = 8;
  repeated ExperimentSummaryModel failed_experiments = 9;
  repeated ExperimentSummaryModel cancelled_experiments = 10;
  repeated ExperimentSummaryModel created_experiments = 11;
  repeated ExperimentSummaryModel running_experiments = 12;
}








enum ExperimentState {
  CREATED = 0;
  VALIDATED = 1;
  SCHEDULED = 2;
  LAUNCHED = 3;
  EXECUTING = 4;
  CANCELING = 5;
  CANCELED = 6;
  COMPLETED = 7;
}

enum TaskState {
  TASK_CREATED = 0;
  TASK_EXECUTING = 1;
  TASK_COMPLETED = 2;
  TASK_FAILED = 3;
}

enum ProcessState {
  PROCESS_CREATED = 0;
  PROCESS_VALIDATED = 1;
  PROCESS_STARTED = 2;
  PROCESS_PREPROCESSING = 3;
  PROCESS_CONFIGURINGWORKSPACE = 4;
  PROCESS_INPUTDATASTAGING = 5;
  PROCESS_EXECUTING = 6;
  PROCESS_MONITORING = 7;
  PROCESS_OUTPUTDATASTAGING = 8;
  PROCESS_POSTPROCESSING = 9;
  PROCESS_COMPLETED = 10;
  PROCESS_FAILED = 11;
  PROCESS_CANCELLING = 12;
  PROCESS_CANCELED = 13;
  PROCESS_QUEUED = 14;
}

enum JobState {
  JOB_SUBMITTED = 0;
  JOB_QUEUED = 1;
  JOB_ACTIVE = 2;
  JOB_COMPLETE = 3;
  JOB_CANCELED = 4;
  JOB_FAILED = 5;
  JOB_SUSPENDED = 6;
}

message ExperimentStatus {
  ExperimentState state = 1;
  int64 time_of_state_change = 2;
  string reason = 3;
  string status_id = 4;
}

message ProcessStatus {
  ProcessState state = 1;
  int64 time_of_state_change = 2;
  string reason = 3;
  string status_id = 4;
  string process_id = 5;
}

message TaskStatus {
  TaskState state = 1;
  int64 time_of_state_change = 2;
  string reason = 3;
  string status_id = 4;
}

message JobStatus {
  JobState job_state = 1;
  int64 time_of_state_change = 2;
  string reason = 3;
  string status_id = 4;
}

